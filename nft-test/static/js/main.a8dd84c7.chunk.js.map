{"version":3,"sources":["App.js","index.js"],"names":["CONTRACT_ADDRESS","App","useState","currentUserAccount","setCurrentUserAccount","loadState","setLoadState","msgStatus","setMsgStatus","checkWalletConnection","a","window","ethereum","console","log","request","method","accounts","length","account","setupEventListener","connectWallet","alert","provider","ethers","providers","Web3Provider","signer","getSigner","Contract","TestNFT","abi","on","from","tokenID","toNumber","error","askContractToMintNFT","connectedContract","makeTestNFT","nftTxn","wait","hash","useEffect","className","onClick","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"41nEAOMA,EAAmB,6CA8IVC,EA5IH,WAEX,MAAoDC,mBAAS,IAA7D,mBAAOC,EAAP,KAA2BC,EAA3B,KACA,EAAkCF,oBAAS,GAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KACA,EAAkCJ,mBAAS,IAA3C,mBAAOK,EAAP,KAAkBC,EAAlB,KAUMC,EAAqB,uCAAG,kCAAAC,EAAA,2DACRC,OAAbC,EADqB,EACrBA,SADqB,uBAI5BC,QAAQC,IAAI,mBAJgB,0BAO5BD,QAAQC,IAAI,gBAAiBF,GAPD,uBAWNA,EAASG,QAAQ,CAAEC,OAAQ,iBAXrB,OAaN,KAFjBC,EAXuB,QAajBC,QACLC,EAAUF,EAAS,GACzBJ,QAAQC,IAAI,2BAA4BK,GAExCf,EAAsBe,GACtBb,GAAa,GAEbc,KAEAP,QAAQC,IAAI,oBAtBgB,4CAAH,qDA2BrBO,EAAa,uCAAG,gCAAAX,EAAA,yDACrBJ,GAAa,GADQ,WAICK,OAAbC,EAJY,EAIZA,SAJY,uBAOnBU,MAAM,gBAPa,0CAWGV,EAASG,QAAQ,CAAEC,OAAQ,wBAX9B,OAWdC,EAXc,OAapBJ,QAAQC,IAAI,YAAaG,EAAS,IAClCb,EAAsBa,EAAS,IAC/BX,GAAa,GAEbc,IAjBoB,kDAmBpBP,QAAQC,IAAR,MAnBoB,0DAAH,qDAwBbM,EAAkB,uCAAG,kCAAAV,EAAA,sDAC1B,IAAK,EACiBC,QAAbC,EADL,EACKA,WAGDW,EAAW,IAAIC,IAAOC,UAAUC,aAAad,GAC7Ce,EAASJ,EAASK,YACE,IAAIJ,IAAOK,SAAS7B,EAAkB8B,EAAQC,IAAKJ,GAI3DK,GAAG,oBAAoB,SAACC,EAAMC,GAC/CrB,QAAQC,IAAImB,EAAMC,EAAQC,YAE1Bb,MAAM,gJAAD,OAAiJtB,EAAjJ,YAAqKkC,EAAQC,gBAGnLtB,QAAQC,IAAI,6BAEZD,QAAQC,IAAI,gCAEZ,MAAMsB,GACPvB,QAAQC,IAAIsB,GAtBa,2CAAH,qDA2BlBC,EAAoB,uCAAG,sCAAA3B,EAAA,oEAENC,SAAbC,EAFmB,EAEnBA,UAFmB,wBAKpBW,EAAW,IAAIC,IAAOC,UAAUC,aAAad,GAC7Ce,EAASJ,EAASK,YAClBU,EAAoB,IAAId,IAAOK,SAAS7B,EAAkB8B,EAAQC,IAAKJ,GAE7EnB,EAAa,sCATa,SAUP8B,EAAkBC,cAVX,cAUtBC,EAVsB,OAY1BhC,EAAa,yBAZa,UAapBgC,EAAOC,OAba,QAe1BjC,EAAa,4DAAD,OAA6DgC,EAAOE,OAftD,wBAiB1B7B,QAAQC,IAAI,gCAjBc,0DAoB3BD,QAAQC,IAAR,MApB2B,0DAAH,qDA4B1B,OAJA6B,qBAAU,WACTlC,MACE,IAGF,qBAAKmC,UAAU,MAAf,SACC,qBAAKA,UAAU,YAAf,SACC,sBAAKA,UAAU,mBAAf,UACC,mBAAGA,UAAU,uBAAb,+BACA,mBAAGA,UAAU,WAAb,SACyB,KAAvBzC,EAA4B,0BAA4B,kBAG1D,mBAAGyC,UAAU,WAAb,SAAyBvC,EAAY,aAAe,KAEpD,mBAAGuC,UAAU,WAAb,SAAyBrC,IAED,KAAvBJ,EA7HJ,wBAAQ0C,QAASxB,EAAeuB,UAAU,mCAA1C,+BAGO,wBAAQC,QAASR,EAAsBO,UAAU,mCAAjD,8BCfTE,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.a8dd84c7.chunk.js","sourcesContent":["import './styles/App.css';\nimport React, { useEffect, useState } from \"react\";\nimport { ethers } from \"ethers\";\n\nimport TestNFT from './utils/TestNFT.json';\n\n// update contact address + abi json everytime you deploy\nconst CONTRACT_ADDRESS = \"0xaED3640d3d06db27646e380cFF53A06610f0EC17\";\n\nconst App = () => {\n\t// init state vars\n\tconst [currentUserAccount, setCurrentUserAccount] = useState(\"\");\n\tconst [loadState, setLoadState] = useState(false);\n\tconst [msgStatus, setMsgStatus] = useState(\"\");\n\n\t// Render Methods\n\tconst renderNotConnectedContainer = () => (\n\t\t<button onClick={connectWallet} className=\"cta-button connect-wallet-button\">Connect to Wallet</button>\n\t);\n\tconst renderMintUI = () => {\n\t\treturn <button onClick={askContractToMintNFT} className=\"cta-button connect-wallet-button\">Mint NFT</button>\n\t}\n\n\tconst checkWalletConnection = async () => {\n\t\tconst { ethereum } = window;\n\n\t\tif(!ethereum) {\n\t\t\tconsole.log('pls dl metamask');\n\t\t\treturn;\n\t\t} else {\n\t\t\tconsole.log('have ethereum', ethereum);\n\t\t}\n\n\t\t// check if authorised to access user wallet\n\t\tconst accounts = await ethereum.request({ method: 'eth_accounts' });\n\n\t\tif(accounts.length !== 0) {\n\t\t\tconst account = accounts[0];\n\t\t\tconsole.log('authorised account found', account);\n\n\t\t\tsetCurrentUserAccount(account);\n\t\t\tsetLoadState(false);\n\n\t\t\tsetupEventListener();\n\t\t} else {\n\t\t\tconsole.log('no account found');\n\t\t}\n\t}\n\n\t// get user wallet\n\tconst connectWallet = async () => {\n\t\tsetLoadState(true);\n\n\t\ttry {\n\t\t\tconst { ethereum } = window;\n\n\t\t\tif(!ethereum) {\n\t\t\t\talert('get metamask');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst accounts = await ethereum.request({ method: 'eth_requestAccounts' });\n\n\t\t\tconsole.log('connected', accounts[0]);\n\t\t\tsetCurrentUserAccount(accounts[0]);\n\t\t\tsetLoadState(false);\n\n\t\t\tsetupEventListener();\n\t\t} catch (err) {\n\t\t\tconsole.log(err);\n\t\t}\n\t}\n\n\t// setup event listener\n\tconst setupEventListener = async () => {\n\t\ttry {\n\t\t\tconst { ethereum } = window;\n\n\t\t\tif(ethereum) {\n\t\t\t\tconst provider = new ethers.providers.Web3Provider(ethereum);\n\t\t\t\tconst signer = provider.getSigner();\n\t\t\t\tconst connectedContract = new ethers.Contract(CONTRACT_ADDRESS, TestNFT.abi, signer);\n\n\t\t\t\t// \"capture\" the event when our contract throws it\n\t\t\t\t// similar to webhooks\n\t\t\t\tconnectedContract.on(\"NewTestNFTMinted\", (from, tokenID) => {\n\t\t\t\t\tconsole.log(from, tokenID.toNumber());\n\n\t\t\t\t\talert(`NFT is minted and sent to wallet. it might be blank rn, and itll take a while to show up. heres the link: https://testnets.opensea.io/assets/${CONTRACT_ADDRESS}/${tokenID.toNumber()}`)\n\t\t\t\t});\n\n\t\t\t\tconsole.log('event listener is set up');\n\t\t\t} else {\n\t\t\t\tconsole.log('ethereum object doesnt exist');\n\t\t\t}\n\t\t} catch(error) {\n\t\t\tconsole.log(error);\n\t\t}\n\t}\n\n\t// mint nft\n\tconst askContractToMintNFT = async () => {\n\t\ttry {\n\t\t\tconst { ethereum } = window;\n\n\t\t\tif(ethereum) {\n\t\t\t\tconst provider = new ethers.providers.Web3Provider(ethereum);\n\t\t\t\tconst signer = provider.getSigner();\n\t\t\t\tconst connectedContract = new ethers.Contract(CONTRACT_ADDRESS, TestNFT.abi, signer);\n\n\t\t\t\tsetMsgStatus(\"poppin' that wallet to pay for gas\");\n\t\t\t\tlet nftTxn = await connectedContract.makeTestNFT();\n\n\t\t\t\tsetMsgStatus('Mining... please wait');\n\t\t\t\tawait nftTxn.wait();\n\n\t\t\t\tsetMsgStatus(`Mined successfully, see: https://rinkeby.etherscan.io/tx/${nftTxn.hash}`);\n\t\t\t} else {\n\t\t\t\tconsole.log('ethereum object doesnt exist');\n\t\t\t}\n\t\t} catch(error) {\n\t\t\tconsole.log(error);\n\t\t}\n\t}\n\n\tuseEffect(() => {\n\t\tcheckWalletConnection();\n\t}, []);\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<div className=\"container\">\n\t\t\t\t<div className=\"header-container\">\n\t\t\t\t\t<p className=\"header gradient-text\">My NFT Collection</p>\n\t\t\t\t\t<p className=\"sub-text\">\n\t\t\t\t\t\t{currentUserAccount === '' ? 'Please connect a wallet' : 'Welcome user!'}\n\t\t\t\t\t</p>\n\n\t\t\t\t\t<p className=\"sub-text\">{loadState ? 'Loading...' : ''}</p>\n\n\t\t\t\t\t<p className=\"sub-text\">{msgStatus}</p>\n\n\t\t\t\t\t{currentUserAccount === '' ? renderNotConnectedContainer() : renderMintUI()}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}